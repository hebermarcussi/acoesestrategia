import streamlit as st
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import plotly.express as px
import datetime as dt 
from datetime import date, timedelta





col1, col2, col3 = st.columns([2,2,1])

with col2:
    st.image('take2.png', width=100,)
st.markdown('---')
st.markdown("<h2 style='text-align: center; color: black;'>Modo Manual Estrategia</h2>", unsafe_allow_html=True)
st.markdown('---')
st.markdown("<h5 style='text-align: center; color: black;'>Filtro para Teste</h5>", unsafe_allow_html=True)

with st.form(key= 'form1'):
    col1, col2 = st.columns(2)
    with col1:
        data_incio = st.date_input('Data de incio do teste') 
    with col2:
        data_Fim = st.date_input('Data de Fim do teste')    
    acoes = [  
AALR3,
ABCB4,
ABEV3,
AFLT3,
AGRO3,
AGXY3,
AHEB3,
AHEB5,
AHEB6,
ALLD3,
ALPA3,
ALPA4,
ALPK3,
ALSO3,
ALUP11,
ALUP3,
ALUP4,
AMAR3,
AMBP3,
AMER3,
ANIM3,
APER3,
APTI4,
ARZZ3,
ASAI3,
ATMP3,
ATOM3,
AURA33,
AVLL3,
AZEV3,
AZUL4,
B3SA3,
BAHI3,
BALM3,
BALM4,
BAUH4,
BAZA3,
BBAS3,
BBDC3,
BBDC4,
BBSE3,
BDLL3,
BDLL4,
BEEF3,
BEES3,
BEES4,
BGIP3,
BGIP4,
BIOM3,
BKBR3,
BLAU3,
BMEB3,
BMEB4,
BMGB4,
BMIN3,
BMKS3,
BMOB3,
BNBR3,
BOBR4,
BPAC11,
BPAC3,
BPAC5,
BPAN4,
BPAR3,
BRAP3,
BRAP4,
BRBI11,
BRFS3,
BRGE11,
BRGE12,
BRGE3,
BRGE5,
BRGE6,
BRGE7,
BRGE8,
BRIV4,
BRKM3,
BRKM5,
BRKM6,
BRML3,
BRPR3,
BRSR3,
BRSR5,
BRSR6,
BSLI3,
BSLI4,
CALI3,
CAMB3,
CAML3,
CARD3,
CASH3,
CASN3,
CASN4,
CBEE3,
CCRO3,
CEAB3,
CEBR3,
CEBR5,
CEBR6,
CEDO3,
CEDO4,
CEEB3,
CEEB5,
CEED3,
CEED4,
CEGR3,
CEPE3,
CEPE5,
CEPE6,
CGAS3,
CGAS5,
CGRA3,
CGRA4,
CIEL3,
CLSC3,
CLSC4,
CMIG3,
CMIG4,
CMIN3,
COCE3,
COCE5,
COGN3,
CORR4,
CPFE3,
CPLE3,
CPLE5,
CPLE6,
CRDE3,
CRFB3,
CRIV3,
CRIV4,
CRPG3,
CRPG5,
CRPG6,
CSAB3,
CSAB4,
CSAN3,
CSED3,
CSMG3,
CSNA3,
CSRN3,
CSRN5,
CSRN6,
CTKA3,
CTKA4,
CTNM3,
CTNM4,
CTSA3,
CTSA4,
CURY3,
CVCB3,
CXSE3,
CYRE3,
DEXP4,
DIRR3,
DMVF3,
DOHL3,
DOHL4,
DOTZ3,
DTCY3,
DXCO3,
EALT3,
EALT4,
ECOR3,
EEEL4,
EGIE3,
EKTR3,
EKTR4,
ELET3,
ELET5,
ELET6,
ELMD3,
EMAE3,
EMAE4,
EMBR3,
ENAT3,
ENBR3,
ENEV3,
ENGI11,
ENGI3,
ENGI4,
ENJU3,
ENMT3,
ENMT4,
EPAR3,
EQPA3,
EQPA5,
EQPA6,
EQPA7,
EQTL3,
ESPA3,
ESTR3,
ESTR4,
ETER3,
EUCA3,
EUCA4,
EVEN3,
EZTC3,
FESA3,
FESA4,
FHER3,
FIGE3,
FIGE4,
FIQE3,
FLRY3,
FRAS3,
FRIO3,
FRTA3,
G2DI33,
GEPA3,
GEPA4,
GFSA3,
GGBR3,
GGBR4,
GGPS3,
GMAT3,
GOAU3,
GOAU4,
GOLL4,
GPAR3,
GPIV33,
GRND3,
GSHP3,
GUAR3,
HAGA3,
HAGA4,
HAPV3,
HASH11,
HBOR3,
HBRE3,
HBTS5,
HETA3,
HETA4,
HOOT4,
HYPE3,
IGBR3,
IGTI11,
INEP3,
IRBR3,
ITSA3,
ITSA4,
ITUB3,
ITUB4,
JBSS3,
JFEN3,
JHSF3,
JOPA3,
JOPA4,
KEPL3,
KLBN11,
KLBN4,
KRSA3,
LAND3,
LAVV3,
LCAM3,
LEVE3,
LIGT3,
LJQQ3,
LLIS3,
LOGG3,
LOGN3,
LPSB3,
LREN3,
LUPA3,
LUXM3,
LUXM4,
LVTC3,
LWSA3,
MAPT3,
MAPT4,
MATD3,
MDIA3,
MDNE3,
MEAL3,
MELK3,
MERC3,
MERC4,
MGEL4,
MGLU3,
MILS3,
MMXM3,
MNDL3,
MNPR3,
MOAR3,
MODL11,
MODL3,
MODL4,
MOSI3,
MOVI3,
MRFG3,
MRSA3B,
MRSA5B,
MRSA6B,
MRVE3,
MSPA3,
MSPA4,
MTIG3,
MTIG4,
MTRE3,
MTSA3,
MTSA4,
MULT3,
MWET3,
MWET4,
MYPK3,
NEOE3,
NORD3,
NTCO3,
NUTR3,
ODER4,
ODPV3,
OFSA3,
OIBR3,
OIBR4,
OPCT3,
ORVR3,
OSXB3,
PARD3,
PATI3,
PATI4,
PCAR3,
PDGR3,
PDTC3,
PEAB3,
PEAB4,
PETR3,
PETR4,
PETZ3,
PFRM3,
PGMN3,
PINE4,
PLAS3,
PMAM3,
POMO3,
POMO4,
POSI3,
PPLA11,
PRIO3,
PRNR3,
PSSA3,
PTBL3,
PTNT3,
PTNT4,
QUAL3,
RADL3,
RAIL3,
RAPT3,
RAPT4,
RDNI3,
RDOR3,
RECV3,
REDE3,
RENT3,
RNEW11,
RNEW3,
ROMI3,
RPAD3,
RPAD5,
RPAD6,
RPMG3,
RSID3,
RSUL4,
SANB11,
SANB3,
SANB4,
SAPR11,
SAPR4,
SBFG3,
SBSP3,
SCAR3,
SEER3,
SEQL3,
SGPS3,
SHOW3,
SHUL3,
SHUL4,
SIMH3,
SLCE3,
SLED3,
SLED4,
SMTO3,
SNSY3,
SNSY5,
SOJA3,
SOMA3,
SOND3,
SOND5,
SOND6,
SQIA3,
STBP3,
SULA11,
SULA3,
SULA4,
SUZB3,
TAEE11,
TAEE3,
TAEE4,
TASA3,
TASA4,
TCNO3,
TCNO4,
TCSA3,
TECN3,
TEKA3,
TEKA4,
TELB3,
TELB4,
TEND3,
TFCO4,
TGMA3,
TKNO4,
TOTS3,
TPIS3,
TRIS3,
TRPL3,
TRPL4,
TUPY3,
TXRX3,
TXRX4,
UCAS3,
UGPA3,
UNIP3,
UNIP5,
UNIP6,
USIM5,
USIM6,
VALE3,
VBBR3,
VIIA3,
VITT3,
VIVA3,
VIVT3,
VLID3,
VSPT3,
VULC3,
VVEO3,
WEGE3,
WEST3,
WHRL3,
WHRL4,
WIZS3,
WLMM3,
WLMM4,
XPBR31,
YDUQ3,]
    col1, col2 = st.columns(2)
    with col1:
        Ncontrato = st.number_input('Quantidade Açoes', min_value=100)
    with col2:
        porcentagem = st.number_input('Adicione a % queda', max_value=0.00)
    selecao = st.selectbox('Selecione a ação', acoes)
    Botao_filtrar = st.form_submit_button('Filtrar')
if Botao_filtrar == True:
    data_incio = pd.to_datetime(data_incio)
    data_Fim = pd.to_datetime(data_Fim)
    data_Fim = data_Fim + timedelta(1)
    acoes_df =  yf.download(selecao, data_incio, data_Fim, auto_adjust=True)
    acoes_df = acoes_df.drop(columns=['Volume'])
    acoes_df['Close A'] = acoes_df['Close'].shift(1)
    acoes_df.dropna(inplace=True)
    acoes_df['Minima %'] = (acoes_df['Close A'] - acoes_df['Low'])/ acoes_df['Close A'] *(-100)
    acoes_df['Fechamento %'] = (acoes_df['Close A'] - acoes_df['Close'])/ acoes_df['Close A'] *(-100)
    acoes_df = acoes_df.sort_values('Date',ascending = False)
    filtro_df = acoes_df['Minima %'] < porcentagem
    filtrado_df = acoes_df[filtro_df]
    filtrado_df['Resultado'] = filtrado_df['Fechamento %'] - porcentagem
    filtrado_df['Valor'] = ((filtrado_df['Resultado']/100)* filtrado_df['Close'])* Ncontrato
    valortotal = filtrado_df['Valor'].sum()
    porc_total = filtrado_df['Resultado'].sum()
    valortotal = round(valortotal,2)
    porc_total = round(porc_total,2)
    contotal = len(filtrado_df['Resultado'])
    acerto = 0
    erro = 0
    for i in filtrado_df['Resultado']:
        if i > 0:
            acerto = acerto+1
        if i < 0:
            erro = erro+1
    porc_acerto = (acerto*100)/contotal
    porc_erro = (erro*100)/contotal
    porc_acerto = round(porc_acerto)
    porc_erro = round((porc_erro)*-1)
    v_entrada = acoes_df['Close'][0]
    su_valor = porcentagem/100
    su_valor_a = (su_valor * v_entrada )+ v_entrada
    su_valor_a = round(su_valor_a,2)
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric(selecao, value = valortotal, delta= str(porc_total)+'%')
    with col2:
        st.metric('Total Entradas:', value= contotal)
    with col3:
        st.metric('Total Ganhos:', value= acerto, delta=str(porc_acerto)+'%')
    with col4:
        st.metric('Total Perdas:', value= erro, delta=str(porc_erro)+'%')
    st.metric('Valor Compra Proximo dia', value= su_valor_a )
    
    grafico_df = filtrado_df.sort_values('Date',ascending = True)
    grafico_df['Acumulado'] = grafico_df['Valor'].cumsum()
    grafico = grafico_df['Acumulado']
    st.line_chart(grafico)
    st.markdown("<h5 style='text-align: center; color: black;'>Tabela filtrada</h5>", unsafe_allow_html=True)
    filtrado_df = filtrado_df.drop(columns=['Close A'])
    acoes_df = acoes_df.drop(columns=['Close A'])
    st.dataframe(filtrado_df, width=1200)
    st.markdown("<h5 style='text-align: center; color: black;'>Tabela Completa</h5>", unsafe_allow_html=True)
    st.dataframe(acoes_df, width=900)


